#ifndef PROJECTEULER_H
#define PROJECTEULER_H

#define _MAX_WORD_SIZE 1024
typedef char String[_MAX_WORD_SIZE];
typedef enum { false , true }boolean;
void displayMenu(String *inst);
/*
=>	Multiples of 3 and 5
	Problem 1
	If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
	The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
*/
int sum_multiples_of_a_number(int a, int b, int range);
/*
=>	Even Fibonacci numbers
	Problem 2
	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
void sum_of_even_infibseq(int data, long long unsigned int limit);
static long unsigned int rec_fibonacci(int number);
long long unsigned int non_rec_fibonacci(int number);
/*
=>	Largest prime factor
	Problem 3
	The prime factors of 13195 are 5, 7, 13 and 29.
	What is the largest prime factor of the number 600851475143 ?

*/
int get_primeFactor(long unsigned int number);
/*
 *A Prime Number can be divided exactly only by 1 or itself.
 *And it must be a whole number greater than 1.
 */
long unsigned getPrimes(long unsigned int number);
boolean isPrime(long unsigned int n);
/*
 *Odd Numbers
 *Any integer that cannot be divided exactly by 2 is an odd number.
 */
int getOdds(long unsigned int number);
boolean isOdd(long unsigned int n);
/*
 *Even Numbers
 *Any integer that can be divided exactly by 2 is an even number.
*/	
int getEvens(long unsigned int number);
boolean isEven(long unsigned int n);
/*
=>	Largest palindrome product
	Problem 4
	A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
	Find the largest palindrome made from the product of two 3-digit numbers.
*/
#endif //PROJECTEULER_H